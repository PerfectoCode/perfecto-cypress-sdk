on: [push]
name: Build, Test and maybe Publish
jobs:
  test:
    name: Build & Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [10.x.x, 12.x, 14.x]
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Cache node_modules
      id: cache-modules
      uses: actions/cache@v1
      with:
        path: node_modules
        key: ${{ matrix.node-version }}-${{ runner.OS }}-build-${{ hashFiles('package.json') }}
    - name: Install
      if: steps.cache-modules.outputs.cache-hit != 'true'
      run: npm ci
    - name: Lint
      run: npm run lint
    - name: Test
      run: npm test
  publish:
    name: Publish
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Cache node_modules
      id: cache-modules
      uses: actions/cache@v1
      with:
        path: node_modules
        key: 12.x-${{ runner.OS }}-build-${{ hashFiles('package.json') }}
    - name: Install
      if: steps.cache-modules.outputs.cache-hit != 'true'
      run: npm ci
    - name: Build
      run: npm run build

    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch

    - name: Set npm branch releas version
      if: steps.extract_branch.outputs.branch != 'master'
      shell: bash
      run: echo npm version prerelease --preid=${{ steps.extract_branch.outputs.branch }}${{ github.run_id }}

    - name: Publish-branch
      if: steps.extract_branch.outputs.branch != 'master'
      run: npm publish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
        NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}


    - name: Set Publish output
      if: steps.extract_branch.outputs.branch != 'master'
      run: echo "::set-output name=version::${{ steps.extract_branch.outputs.branch }}${{ github.run_id }}"

    - name: Publish-master
      if: steps.extract_branch.outputs.branch == 'master'
      uses: mikeal/merge-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
        NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
    - name: Set Publish output
      if: steps.extract_branch.outputs.branch == 'master'
      run: echo "::set-output name=version::latest"
